"""
Demonstrate generating an RGT volume or flattening with control points. 
Test using the Aus NW Shelf dataset provided by dGB.
Author: Xinming Wu, Colorado School of Mines
Version: 2015.06.03
"""

from java.awt import *
from java.io import *
from java.nio import *
from java.lang import *
from javax.swing import *

from edu.mines.jtk.awt import *
from edu.mines.jtk.dsp import *
from edu.mines.jtk.io import *
from edu.mines.jtk.mosaic import *
from edu.mines.jtk.ogl.Gl import *
from edu.mines.jtk.sgl import *
from edu.mines.jtk.util import *
from edu.mines.jtk.util.ArrayMath import *

from hv import *
from dgb import *
from util import *

# Names and descriptions of image files used below.
gxfile  = "gx" # input image
gtfile  = "gt" # RGT volume
ghfile  = "gh" # horizon volume
gufile  = "gu" # flattened image 
p2file  = "p2" # inline slopes
p3file  = "p3" # crossline slopes
epfile  = "ep" # eigenvalue-derived planarity

#s1 = Sampling(301,1.40,0.004)
#s2 = Sampling(351,1700,2.000)
#s3 = Sampling(300,1201,1.000)
s1 = Sampling(301,1,0)
s2 = Sampling(351,1,0)
s3 = Sampling(300,1,0)

s1 = Sampling(400,1,0)
s2 = Sampling(1670,1,0)
s3 = Sampling(51,1,0)

n1,n2,n3 = s1.count,s2.count,s3.count
d1,d2,d3 = s1.delta,s2.delta,s3.delta

#pngDir = None
pngDir = "../../../png/dgb/rgtc/"
seismicDir = "../../../data/seis/dgb/rgtc/"
pngDir = "../../../png/dgb/subset/"
seismicDir = "../../../data/seis/dgb/subset/"
plotOnly = True

# Three sets of control points, each set 
# (k11 k12 k13 or k21 k22 k23 or k31 k32 k33) 
# belongs to one seismic horizon

k11 = [ 86, 93, 48, 46, 78, 72] #1st coordinates of the control points
k12 = [300,300,300, 28, 77, 63] #2nd coordinates of the control points
k13 = [ 32, 65,242,271, 85, 31] #3rd coordinates of the control points

k21 = [182,177,175,177,176,175,183,182,181,177]
k22 = [275,220,200,153,178,146, 94,300,300, 33]
k23 = [268,268,268,268,271,271,271,202, 94,289]

k31 = [244,244,257,256,254,254,245]
k32 = [300,300,300,300,244,132, 24]
k33 = [ 18, 73,161,241,271,271,271]

k11 = [ 96, 89, 90, 92, 87, 95, 89, 96, 110, 113, 110, 112, 112, 94, 101, 89, 69, 70, 59, 61, 93, 94, 103, 83, 68, 63, 56, 65, 72, 90, 83, 106, 96, 59, 58, 59, 75, 98]
k12 = [ 40, 82, 32, 32, 145, 173, 175, 193, 246, 300, 307, 333, 32, 32, 23, 32, 32, 32, 20, 32, 111, 175, 175, 175, 175, 175, 163, 87, 57, 169, 219, 307, 307, 292, 307, 307, 307, 307]
k13 = [ 50, 50, 27, 42, 50, 50, 34, 50, 50, 50, 33, 50, 119, 60, 150, 167, 211, 248, 280, 275, 150, 133, 85, 169, 211, 266, 280, 280, 280, 150, 150, 75, 108, 280, 266, 239, 209, 181]
# FQ E2
k21 = [ 81, 75, 83, 77, 86, 82, 80, 81, 97, 100, 92, 91, 97, 104, 108, 109, 112, 115, 113, 115, 79, 90, 74, 110, 109, 112, 109, 96, 111, 110, 106, 99, 98, 96, 103, 105, 113, 96, 107, 88, 79, 84, 78, 73, 76, 111, 115]
k22 = [ 141, 170, 216, 251, 282, 307, 307, 307, 307, 307, 307, 307, 307, 258, 206, 307, 307, 307, 307, 307, 175, 175, 175, 175, 130, 53, 12, 296, 175, 175, 175, 157, 108, 68, 188, 211, 265, 32, 32, 32, 32, 110, 43, 11, 32, 32, 32]
k23 = [ 280, 280, 280, 280, 280, 269, 224, 211, 192, 181, 170, 163, 138, 150, 150, 105, 72, 55, 21, 4, 264, 206, 296, 165, 150, 150, 150, 150, 133, 92, 71, 50, 50, 50, 50, 50, 50, 192, 157, 225, 240, 280, 280, 280, 267, 135, 105]
# FQ E3
k31 = [ 100, 100, 93, 91, 91, 90, 90, 93, 90, 94, 86, 93, 99, 88, 88, 94, 107, 116, 117, 123, 119, 124, 126, 118, 113, 100, 123, 122, 112, 103, 100, 101, 98, 123, 92, 93, 102, 93, 91, 86, 90, 93, 91, 95, 90, 92, 92, 120, 116, 121, 115, 117, 121, 113, 113, 118, 116, 110, 114, 116, 114, 114, 116, 111, 107, 96, 99, 100, 99, 104, 109, 109, 113, 113]
k32 = [ 307, 298, 264, 212, 178, 175, 165, 126, 100, 49, 6, 175, 175, 32, 32, 32, 32, 32, 22, 32, 32, 60, 135, 174, 175, 175, 175, 175, 222, 283, 307, 307, 307, 175, 236, 267, 280, 117, 102, 4, 32, 49, 60, 55, 75, 70, 93, 230, 220, 210, 210, 240, 240, 240, 250, 250, 250, 280, 280, 280, 280, 290, 290, 290, 290, 309, 323, 344, 330, 330, 332, 330, 330, 330]
k33 = [ 288, 280, 280, 280, 280, 295, 280, 280, 280, 280, 280, 249, 203, 267, 235, 220, 169, 152, 150, 140, 109, 150, 150, 150, 170, 199, 108, 92, 150, 150, 139, 244, 204, 127, 277, 277, 277, 277, 277, 277, 290, 277, 277, 277, 277, 277, 277, 113, 128, 104, 87, 91, 112, 135, 131, 100, 75, 119, 108, 81, 69, 68, 86, 113, 129, 150, 150, 277, 240, 168, 150, 127, 91, 83]
# FQ E4
k41 = [ 96, 106, 106, 110, 112, 115, 116, 112, 112, 117, 118, 119, 124, 126, 131, 134, 133, 130, 135, 121, 109, 124, 127, 130, 140, 133, 129, 127, 123, 123, 122, 97, 100, 106, 121]
k42 = [ 6, 81, 96, 175, 151, 175, 175, 267, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 300, 201, 277, 243, 201, 176, 123, 86, 41, 19, 6, 32, 32, 32, 32, 32]
k43 = [ 280, 280, 280, 279, 280, 235, 208, 280, 213, 184, 154, 140, 112, 96, 68, 51, 32, 2, 18, 150, 280, 150, 150, 150, 150, 150, 150, 150, 150, 150, 163, 262, 217, 199, 185]
# FQ E5
k51 = [ 112, 112, 113, 111, 116, 124, 122, 123, 129, 132, 139, 146, 129, 138, 129, 144, 144, 139, 126, 117, 124, 138, 140, 131, 135, 128, 131, 127, 154, 159, 162, 148, 133, 126, 135, 125, 111, 109, 109, 123, 125, 133, 128, 144, 146, 139, 130, 118, 116, 112, 113, 115, 114, 106, 112, 111, 113, 118, 117, 122, 135, 144, 132, 129, 127, 130, 137, 129, 133, 122, 129, 123, 130, 125, 130, 132, 128, 137, 135, 134, 137, 135, 139, 140, 136, 145, 150, 158, 149, 145, 142, 147, 141, 142, 140, 133, 130]
k52 = [ 4, 27, 61, 11, 94, 329, 307, 298, 279, 261, 237, 210, 174, 144, 117, 175, 175, 175, 175, 175, 175, 175, 156, 82, 130, 17, 60, 5, 175, 175, 175, 175, 175, 175, 175, 157, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 21, 32, 32, 32, 32, 32, 37, 66, 109, 130, 151, 173, 179, 200, 233, 262, 273, 286, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 306, 184, 200, 208, 218, 228, 234, 243, 270, 291, 300, 175, 175, 175]
k53 = [ 280, 280, 280, 280, 280, 280, 287, 280, 280, 280, 280, 280, 280, 280, 280, 264, 253, 240, 214, 194, 178, 160, 150, 150, 150, 150, 150, 150, 129, 115, 104, 89, 71, 59, 51, 50, 247, 223, 200, 185, 169, 160, 146, 129, 117, 98, 85, 67, 52, 50, 42, 33, 26, 20, 1, 50, 50, 50, 50, 50, 50, 150, 150, 150, 150, 150, 150, 151, 163, 276, 268, 229, 258, 208, 181, 169, 148, 114, 96, 90, 85, 74, 54, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 39, 9, 0]
# FQ E6
k61 = [ 135, 136, 135, 134, 136, 139, 135, 140, 136, 133, 135, 133, 133, 137, 145, 134, 138, 137, 146, 149, 137, 140, 142, 135, 148, 137, 139, 137, 138, 141, 141, 151, 136, 141, 149, 145, 136, 141, 143, 154, 147, 157, 137, 140, 148, 142, 149, 145, 150, 154, 141, 146, 146, 149, 145, 150, 142, 138, 146, 147, 149, 152, 142, 147, 143, 151, 146, 147, 152, 156, 146, 147, 148, 145, 143, 144, 150, 154, 147, 150, 155, 153, 158, 154, 149, 146, 149, 150, 156, 151, 153, 154, 155, 150, 151, 146, 146, 145, 151, 149, 148, 154, 148, 154, 159, 148, 148, 148, 147, 141, 145, 155, 157, 155, 147, 147, 146, 147, 144, 152, 152, 152, 158, 155, 157, 158, 150, 148, 146, 160, 163, 159, 163, 164, 160, 152, 161, 159, 163, 161, 159, 160, 159, 158, 159, 158, 157, 157, 155, 155, 155, 154, 153, 153, 153, 154, 150, 145, 152, 154, 155, 155, 144, 155, 153, 153, 153, 153, 142, 151, 152, 152, 150, 149, 136, 149, 151, 151, 151, 148, 140, 147, 148, 163, 161, 149, 146, 149, 150, 156, 153, 160, 158, 160, 157, 163, 158, 159, 160, 163, 164, 165, 166, 161, 163, 162, 164, 162, 164, 158, 164, 149, 152, 161, 167, 165, 165, 166, 167, 162, 162, 165, 163, 168, 169, 169, 171, 157, 152, 160, 156, 159, 156, 158, 150, 159, 164, 163, 156, 159, 161, 165, 160, 153, 159, 169, 159, 161, 164, 161, 171, 161, 158, 161, 163, 169, 166, 169, 163, 162]
k62= [ 7, 19, 32, 32, 32, 32, 32, 32, 32, 32, 32, 42, 42, 42, 52, 52, 52, 52, 52, 62, 62, 7, 62, 62, 62, 62, 62, 62, 54, 72, 72, 82, 82, 82, 86, 92, 92, 92, 92, 92, 102, 102, 102, 102, 102, 112, 112, 112, 112, 122, 122, 122, 122, 132, 132, 132, 132, 104, 80, 112, 122, 122, 110, 132, 132, 122, 130, 142, 142, 142, 142, 162, 162, 162, 139, 142, 162, 162, 162, 162, 162, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 167, 200, 212, 202, 182, 182, 182, 182, 182, 182, 182, 151, 192, 192, 192, 192, 192, 182, 182, 182, 182, 192, 202, 202, 202, 212, 222, 222, 232, 232, 232, 232, 222, 212, 202, 202, 202, 202, 202, 246, 275, 192, 192, 192, 192, 182, 182, 182, 172, 172, 172, 162, 162, 152, 152, 142, 142, 142, 132, 132, 132, 132, 132, 142, 142, 142, 142, 132, 132, 132, 122, 122, 122, 122, 122, 112, 112, 112, 112, 112, 112, 102, 102, 102, 102, 102, 58, 72, 72, 242, 242, 212, 202, 212, 222, 232, 232, 242, 242, 242, 252, 252, 252, 252, 252, 252, 252, 242, 222, 202, 202, 202, 212, 212, 212, 212, 212, 212, 222, 232, 232, 232, 232, 232, 232, 232, 252, 252, 252, 252, 252, 242, 262, 262, 262, 262, 262, 272, 272, 272, 236, 250, 319, 346, 262, 272, 282, 282, 282, 348, 337, 323, 298, 289, 322, 322, 322, 322, 282, 292, 292, 292, 302, 302, 302, 302]
k63 = [ 280, 280, 275, 264, 245, 234, 222, 209, 197, 178, 163, 188, 262, 228, 226, 193, 247, 274, 165, 165, 155, 150, 182, 202, 221, 237, 258, 277, 280, 248, 191, 182, 208, 250, 280, 269, 230, 253, 197, 186, 157, 182, 220, 246, 267, 240, 199, 160, 181, 178, 158, 233, 209, 239, 201, 191, 163, 150, 150, 260, 247, 256, 280, 279, 269, 268, 280, 269, 228, 238, 258, 195, 168, 156, 150, 213, 268, 278, 252, 230, 217, 202, 210, 216, 224, 235, 248, 261, 274, 253, 186, 177, 171, 154, 150, 150, 195, 211, 204, 219, 234, 242, 247, 265, 272, 280, 251, 241, 225, 215, 200, 191, 176, 159, 153, 185, 165, 189, 184, 165, 196, 165, 189, 202, 160, 152, 210, 213, 222, 131, 68, 56, 78, 50, 50, 139, 78, 57, 105, 103, 57, 73, 93, 62, 54, 77, 97, 70, 96, 68, 56, 91, 87, 74, 67, 57, 52, 144, 126, 107, 101, 111, 144, 123, 73, 64, 87, 120, 147, 95, 84, 73, 58, 52, 148, 96, 86, 69, 61, 51, 150, 79, 66, 154, 173, 229, 236, 242, 241, 240, 226, 199, 217, 244, 238, 218, 190, 186, 183, 156, 163, 136, 130, 123, 102, 88, 111, 88, 71, 59, 130, 149, 151, 142, 133, 123, 104, 85, 76, 57, 56, 133, 147, 119, 109, 96, 103, 177, 169, 195, 234, 215, 187, 180, 280, 280, 280, 280, 259, 258, 253, 209, 179, 50, 50, 50, 50, 50, 255, 238, 218, 226, 170, 229, 263, 213, 172, 195, 236, 260]
# FQ E7
k71 = [ 176, 174, 176, 176, 180, 177, 167, 171, 171, 167, 165, 172, 173, 174, 175, 173, 178, 185, 186, 187, 181, 186, 183, 183, 184, 182, 180, 183, 178, 181, 184, 180, 181, 176, 178, 175, 176, 173, 172, 170, 171, 171, 172, 176, 175, 178, 174, 174, 178, 178, 177, 179, 189, 179, 181, 182, 178, 180, 178, 180, 181, 181, 181, 179, 182, 182, 180, 165, 162, 157, 186, 182, 182, 184, 184, 180, 180, 178, 175, 177, 177, 178, 177, 172, 171, 156, 155, 158, 160, 159, 159, 153, 154, 158, 153, 151, 175, 169, 166, 174, 175, 166, 166, 166, 170, 172, 171, 174, 171, 165, 161, 158, 157, 157, 158, 169, 171, 174, 170, 171, 171, 174, 177, 173, 172, 171, 174, 175, 171, 172, 173, 173, 170, 172, 173, 171, 175, 173, 169, 168, 167, 169, 172, 171, 172, 170, 170, 172, 172, 172, 171, 172, 169, 167, 162, 167, 174, 168, 168, 164]
k72 = [ 343, 311, 295, 261, 251, 234, 218, 205, 197, 191, 178, 175, 175, 175, 175, 175, 175, 175, 175, 191, 199, 208, 211, 218, 240, 256, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 184, 193, 196, 201, 205, 212, 222, 284, 312, 348, 290, 290, 290, 290, 290, 290, 290, 290, 287, 302, 274, 307, 307, 307, 307, 325, 161, 140, 85, 177, 164, 148, 143, 132, 136, 126, 104, 93, 89, 80, 72, 66, 59, 54, 48, 56, 37, 17, 1, 32, 32, 32, 32, 32, 32, 52, 36, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 173, 163, 158, 147, 139, 131, 123, 116, 108, 58, 35, 15, 7, 0, 28, 19, 8, 1]
k73 = [ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 55, 66, 73, 84, 100, 107, 137, 149, 150, 150, 150, 150, 150, 150, 150, 154, 161, 166, 170, 175, 179, 194, 216, 223, 235, 242, 246, 262, 270, 279, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 61, 105, 232, 188, 155, 137, 135, 128, 150, 150, 150, 173, 243, 157, 151, 150, 50, 50, 50, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 50, 50, 50, 50, 50, 45, 22, 18, 14, 9, 1, 150, 150, 141, 145, 149, 156, 152, 160, 163, 167, 181, 185, 176, 104, 97, 88, 73, 58, 51, 123, 189, 193, 196, 202, 205, 207, 210, 215, 225, 228, 230, 233, 236, 241, 245, 246, 248, 251, 253, 257, 255, 265, 267, 278, 296, 299, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 150, 150, 150, 150]
# FQ E8
k81 = [ 206, 203, 201, 202, 200, 200, 200, 200, 201, 198, 202, 205, 200, 199, 197, 199, 202, 199, 195, 197, 200, 202, 202, 205, 202, 203, 202, 206, 209, 210, 205, 209, 210, 205, 204, 199, 201, 196, 202, 201, 206, 205, 205, 206, 207, 206, 206, 202, 202, 199, 198, 196, 202, 199, 202, 199, 200, 202, 198, 200, 197, 196, 201, 198, 201, 198, 200, 198, 198, 195, 203, 197, 201, 206, 200, 202, 205, 202, 201, 202, 203, 203, 202, 201, 203, 201, 199, 203, 203, 204, 202, 199, 199, 198, 201, 204, 196, 200, 203, 206, 207, 206, 208, 204, 204, 202, 199, 201, 199, 208, 210, 210, 205, 205, 204, 203, 202, 199, 202, 204, 208, 209, 209, 208, 206, 208, 207, 203, 212, 212, 208, 201, 199, 199, 194, 194, 193, 194, 196, 209, 223, 215, 210, 209, 199, 196, 202, 192, 189, 195, 198, 221, 222, 210, 207, 203, 203, 216, 222, 210, 202, 197, 197, 206, 214, 206, 200, 200, 196, 210, 199, 200, 203, 203, 214, 210, 201, 205, 202, 199, 202, 205, 204, 212, 210, 209, 211, 211, 210]
k82 = [ 299, 210, 205, 196, 186, 175, 162, 140, 123, 116, 94, 54, 32, 18, 7, 32, 32, 32, 32, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 261, 231, 193, 284, 315, 345, 324, 307, 307, 307, 307, 307, 307, 307, 307, 307, 333, 70, 70, 70, 60, 40, 40, 40, 40, 40, 30, 30, 30, 30, 30, 20, 20, 20, 20, 20, 20, 20, 0, 0, 0, 0, 90, 90, 90, 100, 100, 100, 110, 110, 110, 110, 120, 120, 120, 120, 140, 140, 140, 150, 150, 150, 150, 150, 150, 200, 200, 200, 200, 200, 200, 200, 170, 170, 170, 170, 170, 170, 170, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 260, 260, 260, 270, 270, 270, 290, 290, 290, 172, 146, 122, 100, 90, 86, 73, 63, 54, 45, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 80, 70, 70, 60, 60, 60, 60, 60, 60, 60, 60, 70, 70, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 100, 100, 100, 100, 100, 120, 120, 120, 120, 110, 130, 130, 130, 120, 120]
k83 = [ 280, 280, 280, 280, 280, 290, 280, 280, 280, 280, 280, 280, 289, 280, 280, 260, 258, 247, 241, 278, 275, 258, 249, 233, 241, 226, 221, 214, 183, 191, 150, 150, 150, 150, 150, 150, 150, 118, 129, 137, 154, 159, 169, 228, 249, 261, 280, 258, 267, 242, 241, 238, 247, 250, 259, 262, 264, 260, 244, 241, 236, 233, 240, 243, 257, 261, 273, 277, 264, 248, 241, 228, 274, 267, 258, 260, 268, 275, 278, 275, 268, 261, 259, 268, 274, 277, 270, 250, 235, 233, 243, 261, 268, 275, 280, 235, 247, 261, 223, 207, 200, 174, 199, 212, 229, 234, 259, 262, 274, 160, 155, 183, 215, 221, 229, 235, 239, 254, 274, 243, 185, 170, 171, 191, 243, 172, 233, 131, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 161, 183, 199, 209, 216, 221, 230, 233, 291, 147, 144, 135, 128, 197, 199, 220, 221, 272, 294, 211, 198, 181, 170, 163, 156, 174, 186, 171, 165, 160, 156, 220, 238, 248, 259, 277, 187, 166, 156, 233, 248, 285, 248, 238, 220, 195, 177, 193, 206, 197, 168]
# FQ E9
k91 = [ 226, 224, 225, 226, 216, 222, 221, 221, 221, 220, 219, 216, 216, 218, 216, 215, 221, 222, 215, 219, 215, 216, 216, 215, 223, 220, 216, 212, 207, 204, 209, 210, 216, 214, 215, 212, 214, 219, 203, 207, 211, 214, 212, 210, 208, 208, 203, 198, 197, 193, 193, 197, 191, 186, 188, 189, 188, 185, 178, 173, 177, 178, 175, 169, 181, 186, 189, 188, 189, 193, 199, 181, 182, 217, 218, 223, 221, 227, 234, 229, 219, 225, 197, 201, 203, 201, 214, 213, 222, 220, 225, 231, 229, 225, 170, 183]
k92 = [ 307, 307, 307, 307, 307, 307, 327, 307, 261, 216, 210, 175, 175, 168, 156, 137, 94, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 23, 3, 307, 307, 307, 320, 335, 348, 307, 307, 307, 294, 282, 269, 255, 247, 235, 220, 207, 195, 181, 158, 130, 119, 94, 60, 45, 37, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 23, 3, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 309, 237, 204, 183, 175, 175]
k93 = [ 177, 164, 161, 133, 101, 251, 277, 294, 277, 277, 277, 277, 289, 277, 277, 277, 277, 277, 296, 268, 230, 226, 221, 211, 198, 183, 172, 157, 147, 134, 150, 150, 83, 66, 54, 50, 50, 50, 9, 27, 41, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 35, 28, 18, 11, 5, 0, 48, 65, 87, 96, 106, 121, 130, 50, 50, 266, 251, 233, 224, 202, 183, 162, 146, 152, 53, 57, 67, 80, 93, 101, 121, 136, 150, 150, 150, 150, 4, 39]
# FQ E9a
k101 = [ 230, 239, 236, 231, 233, 236, 231, 232, 234, 229, 229, 226, 224, 223, 229, 228, 225, 235, 225, 218, 223, 222, 216, 211, 204, 205, 234, 232, 235, 233, 230, 239, 234, 241, 236, 235, 241, 227, 230, 239, 239, 231, 229, 226, 226, 227, 230, 236, 243, 242, 233, 229, 225, 227, 239, 237, 228, 229, 223, 223, 232, 236, 221, 223, 226, 231, 230, 228, 228, 226, 224, 228, 229, 225, 235, 222]
k102 = [ 328, 289, 223, 188, 175, 307, 307, 307, 307, 332, 246, 186, 175, 133, 75, 36, 32, 307, 307, 307, 307, 307, 307, 307, 307, 307, 305, 305, 305, 305, 305, 255, 255, 235, 235, 225, 225, 215, 215, 215, 205, 205, 205, 205, 195, 195, 195, 195, 195, 185, 185, 185, 185, 155, 155, 145, 145, 145, 145, 135, 135, 135, 96, 75, 75, 75, 65, 65, 55, 55, 45, 45, 35, 32, 290, 290]
k103 = [ 150, 150, 150, 150, 154, 128, 157, 166, 207, 277, 277, 277, 285, 277, 277, 277, 287, 117, 105, 96, 73, 57, 46, 33, 9, 1, 179, 152, 119, 214, 271, 156, 214, 162, 200, 209, 167, 243, 234, 192, 192, 230, 235, 241, 265, 247, 237, 209, 166, 167, 213, 236, 258, 246, 191, 190, 227, 236, 273, 276, 201, 170, 150, 152, 229, 198, 201, 251, 254, 213, 214, 247, 250, 237, 127, 108]
# FQ E10
k111 = [ 225, 220, 242, 247, 242, 243, 243, 248, 241, 241, 220, 210, 202, 204, 248, 242, 242, 242, 242, 240, 233, 248, 244, 246, 246, 242, 235, 218, 226, 236, 242, 243, 242, 242, 242, 239, 243, 241, 240, 248, 245, 252, 254, 245, 238, 237, 239, 232, 235, 236, 240, 242, 236, 239, 234, 230, 233, 232, 235, 230, 232, 223, 213, 218, 224, 224, 224, 213, 206, 210, 206, 205, 203, 212, 207, 209, 219, 214, 222, 227, 226]
k112 = [ 305, 305, 305, 305, 305, 330, 305, 305, 305, 327, 305, 305, 305, 305, 282, 275, 187, 123, 66, 34, 10, 307, 307, 307, 307, 307, 307, 307, 307, 317, 339, 347, 307, 334, 229, 150, 80, 176, 175, 175, 175, 175, 175, 175, 175, 191, 138, 96, 51, 32, 35, 32, 32, 32, 32, 32, 35, 175, 175, 175, 295, 266, 211, 175, 175, 175, 175, 175, 175, 135, 106, 39, 32, 32, 8, 32, 32, 32, 32, 32, 10]
k113 = [ 75, 99, 127, 137, 149, 150, 166, 186, 264, 277, 56, 33, 13, 4, 150, 277, 277, 277, 277, 277, 277, 191, 164, 136, 118, 92, 59, 11, 31, 50, 50, 50, 269, 280, 280, 280, 280, 280, 288, 223, 242, 203, 185, 162, 153, 150, 150, 150, 150, 290, 280, 241, 218, 205, 174, 158, 150, 131, 141, 115, 50, 50, 50, 55, 66, 91, 100, 48, 6, 50, 50, 50, 31, 88, 50, 75, 131, 112, 140, 148, 150]

k111 = [ 242, 247, 242, 243, 243, 248, 241, 241, 248, 242, 242, 242, 242, 240, 233, 248, 244, 246, 246, 242, 235, 218, 226, 236, 242, 243, 242, 242, 242,
  239, 243, 241, 240, 248, 245, 252, 254, 245, 238, 237, 239, 232, 235, 236, 240, 242, 236, 239, 234, 230, 233, 232, 235, 230, 232, 223, 213, 218, 224, 224, 224, 213, 206, 210,
  206, 205, 203, 212, 207, 209, 219, 214, 222, 227, 226]
k112 = [ 305, 305, 305, 330, 305, 305, 305, 327, 282, 275, 187, 123,  66,  34,  10, 307, 307, 307, 307, 307, 307, 307, 307, 317, 339, 347, 307, 334, 229, 
  150,  80, 176, 175, 175, 175, 175, 175, 175, 175, 191, 138,  96,  51,  32,  35,  32,  32,  32,  32,  32,  35, 175, 175, 175, 295, 266, 211, 175, 175, 175, 175, 175, 175, 135,
  106,  39,  32,  32,   8,  32,  32,  32,  32,  32,  10]
k113 = [ 127, 137, 149, 150, 166, 186, 264, 277, 150, 277, 277, 277, 277, 277, 277, 191, 164, 136, 118,  92,  59,  11,  31,  50,  50,  50, 269, 280, 280,
  280, 280, 280, 288, 223, 242, 203, 185, 162, 153, 150, 150, 150, 150, 290, 280, 241, 218, 205, 174, 158, 150, 131, 141, 115,  50,  50,  50,  55,  66,  91, 100,  48,   6,  50,
   50,  50,  31,  88,  50,  75, 131, 112, 140, 148, 150]
# FQ E11
k121 = [ 257, 252, 252, 253, 253, 253, 248, 240, 226, 238, 241, 244, 246, 236, 233, 233, 227, 231, 228, 226, 231, 230, 226, 225, 222, 220, 219, 223, 219, 223, 223, 225, 252, 253, 251, 248, 249, 251, 246, 244, 239, 235, 250, 244, 237, 226, 224, 226, 232, 232, 246, 251, 253, 257, 253, 234, 239, 234, 241, 247]
k122 = [ 307, 307, 328, 307, 330, 307, 307, 307, 307, 307, 312, 325, 349, 290, 280, 274, 249, 239, 227, 218, 202, 177, 175, 140, 123, 37, 32, 12, 32, 32, 32, 32, 307, 254, 183, 175, 157, 93, 63, 34, 32, 3, 32, 32, 32, 32, 32, 32, 32, 32, 175, 220, 270, 175, 175, 175, 175, 175, 175, 184]
k123 = [ 216, 275, 277, 163, 150, 124, 107, 73, 10, 48, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 40, 50, 50, 50, 28, 50, 47, 65, 89, 97, 290, 277, 277, 292, 277, 277, 277, 277, 291, 277, 253, 212, 173, 106, 116, 126, 139, 158, 154, 150, 150, 220, 254, 58, 69, 100, 133, 150]

# Processing begins here. When experimenting with one part of this demo, we
# can comment out earlier parts that have already written results to files.
def main(args):
  #goSlopes()
  goFlattenC()

def goSlopes():
  print "goSlopes ..."
  if not plotOnly:
    # set half-width of smoother for computing structure tensors
    sig1 = 4.0 #half-width in vertical direction
    sig2 = 1.0 #half-width in one literal direction
    sig3 = 1.0 #half-width in another literal direction
    pmax = 5.0 #maximum slope returned by this slope finder
    gx = readImage(gxfile)
    p2 = zerofloat(n1,n2,n3)
    p3 = zerofloat(n1,n2,n3)
    ep = zerofloat(n1,n2,n3)
    lsf = LocalSlopeFinder(sig1,sig2,sig3,pmax)
    lsf.findSlopes(gx,p2,p3,ep);
    ep = pow(ep,6.0)
    #control points for extracting the water bottom surface
    c1=[ 31, 68,56]
    c2=[226,275,35]
    c3=[263, 53,35]
    zm = ZeroMask(c1,c2,c3,p2,p3,ep,gx)
    zero = 0.00;
    tiny = 0.01;
    zm.setValue(zero,p2)#set inline slopes for samples above water bottom
    zm.setValue(zero,p3)#set crossline slopes for samples above water bottom
    zm.setValue(tiny,ep)#set planarities for samples above water bottom
    writeImage(p2file,p2)
    writeImage(p3file,p3)
    writeImage(epfile,ep)
    print "p2  min =",min(p2)," max =",max(p2)
    print "p3  min =",min(p3)," max =",max(p3)
    print "ep  min =",min(ep)," max =",max(ep)
  else:
    gx = readImage(gxfile)
    p2 = readImage(p2file)
    p3 = readImage(p3file)
    ep = readImage(epfile)
  plot3(gx)
  plot3(gx,p2, cmin=-1,cmax=1,cmap=jetRamp(1.0),
      clab="Inline slope (sample/sample)",png="p2")
  plot3(gx,p3, cmin=-1,cmax=1,cmap=jetRamp(1.0),
      clab="Crossline slope (sample/sample)",png="p3")
  plot3(gx,pow(ep,4.0),cmin=0,cmax=1,cmap=jetRamp(1.0),
      clab="Planarity")

def goFlattenC():
  print "Flatten with control points..."
  if not plotOnly:
    gx = readImage(gxfile)
    p2 = readImage(p2file)
    p3 = readImage(p3file)
    ep = readImage(epfile)

    sc = SetupConstraints()
    kk1 = sc.extend(k11,k12,k13,n2,n3,p2,p3,ep,gx)
    kk2 = sc.extend(k21,k22,k23,n2,n3,p2,p3,ep,gx)
    kk3 = sc.extend(k31,k32,k33,n2,n3,p2,p3,ep,gx)
    kk4 = sc.extend(k41,k42,k43,n2,n3,p2,p3,ep,gx)
    kk5 = sc.extend(k51,k52,k53,n2,n3,p2,p3,ep,gx)
    kk6 = sc.extend(k61,k62,k63,n2,n3,p2,p3,ep,gx)
    kk7 = sc.extend(k71,k72,k73,n2,n3,p2,p3,ep,gx)
    kk8 = sc.extend(k81,k82,k83,n2,n3,p2,p3,ep,gx)
    kk9 = sc.extend(k91,k92,k93,n2,n3,p2,p3,ep,gx)
    kk10 = sc.extend(k101,k102,k103,n2,n3,p2,p3,ep,gx)
    kk11 = sc.extend(k111,k112,k113,n2,n3,p2,p3,ep,gx)
    kk12 = sc.extend(k121,k122,k123,n2,n3,p2,p3,ep,gx)
    k1 = [kk1[0],kk2[0],kk3[0],kk4[0],kk5[0],kk6[0],kk7[0],kk8[0],kk9[0],kk10[0],kk11[0],kk12[0]]
    k2 = [kk1[1],kk2[1],kk3[1],kk4[1],kk5[1],kk6[1],kk7[1],kk8[1],kk9[1],kk10[1],kk11[1],kk12[1]]
    k3 = [kk1[2],kk2[2],kk3[2],kk4[2],kk5[2],kk6[2],kk7[2],kk8[2],kk9[2],kk10[2],kk11[2],kk12[2]]
    k4 = [kk1[3],kk2[3],kk3[3],kk4[3],kk5[3],kk6[3],kk7[3],kk8[3],kk9[3],kk10[3],kk11[3],kk12[3]]

    p2 = mul(d1/d2,p2)
    p3 = mul(d1/d3,p3)
    fl = Flattener3C()
    fl.setIterations(0.01,200)
    fl.setSmoothings(6.0,6.0)
    fl.setWeight1(0.05)  
    fl.setScale(0.001)
    fm = fl.getMappingsFromSlopes(s1,s2,s3,p2,p3,ep,k4,k1,k2,k3)
    gu = fm.flatten(gx) # flattened image
    gt = fm.u1 # rgt volume
    gh = fm.x1 # horizon volume
    writeImage(gufile,gu)
    writeImage(gtfile,gt)
    writeImage(ghfile,gh)
  else:
    gx = readImage(gxfile)
    gu = readImage(gufile)
    gt = readImage(gtfile)
    gh = readImage(ghfile)
  plot3(gx,png="seismic")
  plot3(gu,png="flattened")
  plot3(gx,gt,cmin=min(gt)+20,cmax=max(gt)-10,cmap=jetRamp(1.0),
        clab="Relative geologic time",png="rgt")
  '''
  ha = []
  hs = [280,275,270,265,260,255,250,245,240,235,230,225,220,215,
        210,205,200,195,190,185,180,175,170,165,160,155,150,145,
        140,135,130,125,120,115,110,105,100,95,90,85,80,75,70,65,60,55,50,45,40]
  for ih, h in enumerate(hs):
    ha.append(h)
    plot3(gx,hs=ha,png="horizon"+str(ih))
  '''
  for i1 in range(40,280,5):
    plot3(gx,hs=[i1],png="horizon"+str(i1))
#############################################################################
# read/write files
def readImage(name):
  fileName = seismicDir+name+".dat"
  n1,n2,n3 = s1.count,s2.count,s3.count
  image = zerofloat(n1,n2,n3)
  ais = ArrayInputStream(fileName)
  ais.readFloats(image)
  ais.close()
  return image

def writeImage(name,image):
  fileName = seismicDir+name+".dat"
  aos = ArrayOutputStream(fileName)
  aos.writeFloats(image)
  aos.close()
  return image

# graphics

def jetFill(alpha):
  return ColorMap.setAlpha(ColorMap.JET,alpha)
def jetFillExceptMin(alpha):
  a = fillfloat(alpha,256)
  a[0] = 0.0
  return ColorMap.setAlpha(ColorMap.JET,a)
def jetRamp(alpha):
  return ColorMap.setAlpha(ColorMap.JET,rampfloat(0.0,alpha/256,256))
def bwrFill(alpha):
  return ColorMap.setAlpha(ColorMap.BLUE_WHITE_RED,alpha)
def bwrNotch(alpha):
  a = zerofloat(256)
  for i in range(len(a)):
    if i<128:
      a[i] = alpha*(128.0-i)/128.0
    else:
      a[i] = alpha*(i-127.0)/128.0
  return ColorMap.setAlpha(ColorMap.BLUE_WHITE_RED,a)
def hueFill(alpha):
  return ColorMap.getHue(0.0,1.0,alpha)
def hueFillExceptMin(alpha):
  a = fillfloat(alpha,256)
  a[0] = 0.0
  return ColorMap.setAlpha(ColorMap.getHue(0.0,1.0),a)

def addColorBar(frame,clab=None,cint=None):
  cbar = ColorBar(clab)
  if cint:
    cbar.setInterval(cint)
  cbar.setFont(Font("Arial",Font.PLAIN,32)) # size by experimenting
  cbar.setWidthMinimum
  cbar.setBackground(Color.WHITE)
  frame.add(cbar,BorderLayout.EAST)
  return cbar

def convertDips(ft):
  return FaultScanner.convertDips(0.2,ft) # 5:1 vertical exaggeration

def plot3(f,g=None,cmin=None,cmax=None,cmap=None,clab=None,cint=None,
          hs=None,surf=None, png=None):
  n1,n2,n3 = s1.count,s2.count,s3.count
  d1,d2,d3 = s1.delta,s2.delta,s3.delta
  f1,f2,f3 = s1.first,s2.first,s3.first
  l1,l2,l3 = s1.last,s2.last,s3.last
  sf = SimpleFrame(AxesOrientation.XRIGHT_YOUT_ZDOWN)
  cbar = None
  if g==None:
    ipg = sf.addImagePanels(s1,s2,s3,f)
    if cmap!=None:
      ipg.setColorModel(cmap)
    if cmin!=None and cmax!=None:
      ipg.setClips(cmin,cmax)
    else:
      ipg.setClips(-3.0,3.0)
    if clab:
      cbar = addColorBar(sf,clab,cint)
      ipg.addColorMapListener(cbar)
  else:
    ipg = ImagePanelGroup2(s1,s2,s3,f,g)
    ipg.setClips1(-3.0,3.0)
    if cmin!=None and cmax!=None:
      ipg.setClips2(cmin,cmax)
    if cmap==None:
      cmap = jetFill(0.8)
    ipg.setColorModel2(cmap)
    if clab:
      cbar = addColorBar(sf,clab,cint)
      ipg.addColorMap2Listener(cbar)
    sf.world.addChild(ipg)
  if cbar:
    cbar.setWidthMinimum(120)
  if hs:
    x1 = readImage(ghfile)
    u1 = readImage(gtfile)
    hfr = HorizonFromRgt(s1,s2,s3,x1,u1)
    for hi in hs:
      [xyz,rgb] = hfr.singleHorizon(hi)
      tg = TriangleGroup(True,xyz,rgb)
      sf.world.addChild(tg)
  if surf:
    tgs = Triangle()
    xyz = tgs.trianglesForSurface(surf,0,n1-1)
    tg  = TriangleGroup(True,xyz)
    sf.world.addChild(tg)
  #ipg.setSlices(290,300,268)
  ipg.setSlices(290,300,271)
  if cbar:
    sf.setSize(937,700)
  else:
    sf.setSize(800,700)
  vc = sf.getViewCanvas()
  vc.setBackground(Color.WHITE)
  ov = sf.getOrbitView()
  zscale = 0.6*max(n2*d2,n3*d3)/(n1*d1)
  ov.setAxesScale(1.0,1.0,zscale)
  ov.setScale(1.5)
  ov.setAzimuthAndElevation(220,25)
  ov.setWorldSphere(BoundingSphere(BoundingBox(f3,f2,f1,l3,l2,l1)))
  ov.setTranslate(Vector3(0.0,0.1,0.05))
  sf.setVisible(True)
  if png and pngDir:
    sf.paintToFile(pngDir+png+".png")
    if cbar:
      cbar.paintToPng(137,1,pngDir+png+"cbar.png")

#############################################################################
# Run the function main on the Swing thread
import sys
class _RunMain(Runnable):
  def __init__(self,main):
    self.main = main
  def run(self):
    self.main(sys.argv)
def run(main):
  SwingUtilities.invokeLater(_RunMain(main)) 
run(main)
