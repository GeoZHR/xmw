"""
Demonstrate generating an RGT volume or flattening with control points. 
Test using the Aus NW Shelf dataset provided by dGB.
Author: Xinming Wu, Colorado School of Mines
Version: 2015.06.03
"""

from java.awt import *
from java.io import *
from java.nio import *
from java.lang import *
from javax.swing import *

from edu.mines.jtk.awt import *
from edu.mines.jtk.dsp import *
from edu.mines.jtk.io import *
from edu.mines.jtk.mosaic import *
from edu.mines.jtk.ogl.Gl import *
from edu.mines.jtk.sgl import *
from edu.mines.jtk.util import *
from edu.mines.jtk.util.ArrayMath import *

from hv import *
from dgb import *
from util import *

# Names and descriptions of image files used below.
gxfile  = "gx" # input image
gtfile  = "gt" # RGT volume
ghfile  = "gh" # horizon volume
gufile  = "gu" # flattened image 
p2file  = "p2" # inline slopes
p3file  = "p3" # crossline slopes
epfile  = "ep" # eigenvalue-derived planarity

s1 = Sampling(400,1,0)
s2 = Sampling(1670,1,0)
s3 = Sampling(51,1,0)

n1,n2,n3 = s1.count,s2.count,s3.count
d1,d2,d3 = s1.delta,s2.delta,s3.delta

#pngDir = None
pngDir = "../../../png/dgb/subset/"
seismicDir = "../../../data/seis/dgb/subset/"
plotOnly = False

# Three sets of control points, each set 
# (k11 k12 k13 or k21 k22 k23 or k31 k32 k33) 
# belongs to one seismic horizon
k11 = [ 94, 92, 92, 90, 88, 87, 87, 85, 86, 85, 84, 82, 82, 83, 81, 82, 82, 80, 
79, 78, 77, 76, 76, 76, 75, 75, 73, 73, 73, 71, 71, 71, 70, 69, 67, 67, 66, 64, 
63, 63, 61, 60, 60, 59, 57, 57, 54, 54, 54, 52, 50, 46, 44, 42, 39, 38, 36, 38, 
41, 39, 40, 38, 38, 37, 37, 35, 33, 30, 29, 31, 30, 31, 32, 36, 36, 36, 35, 34, 
33, 33, 32, 31, 32, 31, 33, 32, 29, 30, 29, 29, 28, 29, 28, 28, 27, 27, 27, 26, 
26, 25, 25, 23, 24, 23, 23, 24, 23, 24, 23, 23, 21, 20, 21, 22, 23, 20, 20, 19, 
20, 18, 19, 18, 18, 19, 19, 18, 18, 17, 18, 18, 17, 18, 18, 17, 17, 17, 16, 17, 
16, 16, 16, 17, 16, 15, 16, 17, 17, 19, 17, 18, 18, 22, 22, 21, 23, 24, 27, 28, 
26, 27, 29, 29, 30, 31, 33, 34, 35, 94, 92, 90, 88, 87, 87, 88, 87, 87, 85, 83, 
83, 81, 81, 81, 81, 80, 80, 79, 79, 78, 78, 76, 75, 75, 75, 74, 73, 73, 73, 71, 
71, 70, 69, 68, 68, 67, 66, 64, 63, 62, 61, 61, 60, 59, 57, 58, 57, 55, 55, 53, 
51, 48, 45, 45, 41, 39, 40, 41, 41, 40, 39, 40, 39, 39, 37, 35, 31, 28, 30, 30, 
31, 33, 34, 35, 34, 33, 32, 32, 32, 31, 30, 30, 31, 32, 30, 28, 28, 28, 27, 28, 
28, 27, 27, 27, 27, 27, 27, 27, 25, 24, 23, 24, 23, 23, 23, 23, 23, 23, 22, 21, 
22, 22, 20, 22, 22, 20, 21, 20, 20, 18, 18, 18, 18, 17, 17, 17, 17, 16, 18, 17, 
16, 16, 17, 17, 18, 16, 16, 15, 16, 16, 15, 15, 15, 16, 15, 16, 15, 15, 13, 16, 
19, 21, 22, 22, 24, 25, 26, 26, 27, 28, 29, 30, 32, 33, 33, 32, 92, 92, 89, 87, 
88, 89, 88, 87, 87, 86, 85, 84, 80, 80, 80, 79, 80, 81, 80, 79, 79, 77, 76, 77, 
75, 75, 75, 74, 74, 73, 71, 71, 70, 69, 70, 69, 68, 67, 66, 64, 62, 62, 61, 61, 
60, 59, 59, 57, 57, 56, 56, 54, 53, 49, 48, 46, 45, 43, 44, 44, 44, 43, 43, 41, 
39, 35, 34, 32, 27, 30, 30, 31, 34, 35, 33, 33, 32, 31, 30, 29, 29, 30, 29, 31, 
31, 30, 30, 28, 28, 28, 28, 27, 27, 27, 27, 27, 27, 26, 26, 25, 24, 23, 23, 24, 
22, 22, 22, 23, 22, 22, 21, 22, 22, 22, 23, 21, 19, 20, 18, 18, 18, 18, 17, 16, 
18, 17, 17, 17, 17, 17, 17, 16, 17, 18, 19, 18, 17, 16, 16, 16, 16, 16, 15, 15, 
14, 14, 14, 14, 12, 10, 14, 20, 22, 22, 24, 21, 20, 23, 25, 26, 28, 29, 31, 31, 
31, 32, 32, 92, 91, 89, 88, 90, 89, 88, 88, 87, 86, 85, 82, 80, 78, 80, 79, 79, 
79, 79, 79, 78, 77, 77, 76, 76, 76, 75, 76, 73, 73, 73, 71, 69, 69, 70, 69, 69, 
68, 67, 65, 62, 62, 59, 59, 59, 60, 58, 58, 58, 57, 58, 58, 57, 54, 52, 50, 49, 
48, 47, 46, 46, 46, 45, 44, 41, 38, 36, 32, 28, 30, 31, 32, 34, 35, 33, 31, 30, 
31, 29, 29, 28, 30, 29, 29, 29, 30, 29, 29, 29, 28, 29, 26, 27, 26, 26, 26, 25, 
26, 25, 26, 23, 24, 23, 23, 23, 22, 22, 21, 22, 22, 20, 22, 21, 22, 23, 21, 19, 
21, 19, 19, 19, 19, 17, 17, 18, 18, 16, 15, 16, 17, 15, 16, 16, 18, 17, 17, 16, 
15, 15, 15, 15, 15, 15, 14, 16, 15, 12, 11, 7, 7, 13, 18, 21, 22, 20, 19, 19, 
21, 24, 25, 27, 28, 31, 31, 32, 33, 34, 92, 90, 89, 90, 90, 90, 89, 87, 87, 86, 
84, 82, 81, 78, 79, 78, 79, 80, 80, 80, 79, 78, 76, 76, 77, 76, 75, 75, 74, 75, 
74, 72, 70, 69, 70, 70, 69, 68, 68, 64, 61, 57, 57, 56, 57, 58, 59, 59, 58, 60, 
60, 59, 57, 56, 55, 53, 53, 52, 49, 47, 47, 47, 45, 43, 43, 39, 36, 34, 31, 33, 
33, 36, 35, 33, 33, 29, 29, 29, 28, 27, 28, 28, 29, 28, 28, 29, 29, 29, 28, 27, 
26, 26, 26, 25, 26, 26, 27, 25, 24, 26, 23, 22, 23, 23, 22, 21, 23, 21, 21, 22, 
20, 21, 21, 21, 22, 21, 19, 20, 20, 18, 18, 18, 17, 16, 17, 17, 17, 16, 15, 16, 
15, 16, 16, 17, 18, 17, 15, 15, 15, 14, 15, 14, 13, 14, 14, 14, 13, 11, 7, 8, 
15, 18, 19, 20, 19, 19, 22, 22, 24, 25, 26, 28, 29, 30, 31, 32, 33, 91, 90, 89, 
90, 90, 89, 89, 88, 87, 86, 84, 83, 82, 81, 79, 78, 78, 79, 80, 78, 78, 78, 77, 
77, 77, 77, 76, 76, 75, 75, 74, 74, 73, 71, 71, 73, 71, 69, 67, 62, 59, 55, 53, 
52, 54, 58, 60, 60, 61, 60, 60, 60, 58, 57, 57, 56, 54, 53, 50, 49, 48, 47, 47, 
46, 44, 42, 39, 36, 35, 36, 35, 36, 34, 32, 29, 30, 27, 27, 27, 27, 29, 28, 28, 
27, 29, 28, 28, 28, 28, 27, 25, 24, 25, 26, 26, 25, 26, 25, 24, 24, 23, 22, 23, 
23, 21, 20, 22, 21, 22, 22, 21, 22, 21, 21, 21, 21, 19, 19, 19, 17, 17, 17, 17, 
16, 16, 17, 16, 16, 14, 15, 15, 16, 16, 15, 16, 17, 17, 16, 15, 14, 14, 14, 13, 
14, 15, 14, 15, 12, 9, 13, 16, 20, 22, 19, 20, 22, 23, 24, 24, 26, 25, 27, 28, 
29, 31, 31, 33]

k21 = [ 169, 166, 167, 164, 163, 161, 160, 159, 157, 156, 155, 153, 152, 152, 151, 150, 151, 151, 
148, 147, 146, 145, 143, 142, 142, 140, 138, 136, 136, 136, 136, 135, 136, 134, 133, 133, 132, 
130, 128, 127, 127, 126, 126, 126, 127, 126, 125, 126, 128, 129, 131, 128, 129, 128, 125, 122, 
120, 124, 127, 129, 131, 130, 127, 129, 126, 123, 126, 127, 124, 121, 121, 118, 121, 124, 123, 
122, 121, 120, 121, 122, 121, 121, 120, 119, 118, 119, 116, 116, 116, 116, 115, 115, 115, 115, 
114, 111, 112, 112, 110, 109, 110, 109, 111, 112, 111, 112, 112, 111, 111, 110, 111, 112, 112, 
112, 112, 111, 111, 112, 112, 112, 112, 112, 113, 114, 115, 114, 116, 117, 117, 117, 117, 119, 
119, 118, 118, 118, 118, 118, 118, 118, 117, 117, 119, 121, 122, 125, 125, 126, 126, 128, 133, 
136, 137, 137, 134, 138, 139, 141, 142, 144, 142, 140, 140, 139, 140, 140, 140, 167, 167, 165, 
163, 163, 161, 160, 158, 157, 156, 155, 154, 152, 153, 152, 152, 152, 152, 150, 149, 147, 145, 
144, 143, 141, 140, 139, 137, 136, 136, 136, 136, 135, 135, 135, 133, 133, 131, 130, 129, 128, 
128, 129, 128, 128, 129, 129, 130, 130, 128, 130, 131, 132, 129, 124, 122, 122, 126, 130, 131, 
132, 132, 130, 130, 124, 122, 125, 126, 122, 119, 119, 121, 124, 123, 122, 121, 121, 121, 121, 
122, 122, 122, 121, 120, 119, 119, 117, 116, 117, 116, 117, 115, 115, 115, 115, 114, 114, 114, 
113, 110, 109, 110, 112, 112, 111, 111, 112, 112, 111, 111, 112, 113, 113, 113, 113, 112, 112, 
112, 112, 112, 112, 113, 114, 114, 115, 115, 116, 117, 116, 117, 118, 119, 119, 119, 119, 118, 
117, 117, 118, 118, 118, 118, 119, 121, 123, 124, 125, 125, 126, 126, 132, 135, 138, 138, 135, 
137, 136, 138, 141, 142, 140, 140, 139, 139, 139, 140, 139, 168, 166, 164, 166, 163, 161, 160, 
158, 158, 157, 155, 154, 153, 153, 152, 153, 151, 150, 152, 149, 147, 145, 144, 142, 142, 142, 
140, 139, 138, 137, 137, 137, 135, 135, 134, 134, 133, 132, 131, 131, 130, 130, 132, 130, 130, 
130, 130, 130, 129, 129, 131, 133, 132, 130, 126, 124, 126, 130, 133, 132, 131, 131, 130, 129, 
125, 124, 126, 125, 122, 120, 118, 121, 125, 124, 123, 123, 121, 120, 121, 122, 123, 122, 121, 
121, 121, 120, 118, 118, 119, 117, 117, 116, 114, 114, 114, 114, 113, 114, 112, 112, 111, 112, 
112, 111, 112, 112, 113, 112, 112, 113, 112, 113, 113, 113, 114, 113, 113, 112, 113, 113, 113, 
114, 114, 114, 116, 116, 117, 117, 117, 118, 118, 118, 118, 118, 117, 118, 117, 118, 119, 119, 
118, 119, 120, 122, 124, 124, 125, 126, 124, 125, 132, 135, 138, 138, 135, 134, 131, 132, 137, 
139, 138, 139, 139, 138, 139, 140, 139, 167, 165, 166, 164, 163, 161, 160, 159, 158, 156, 155, 
155, 156, 153, 152, 154, 152, 152, 151, 149, 148, 147, 144, 143, 143, 143, 142, 140, 140, 140, 
138, 137, 137, 135, 134, 135, 133, 133, 133, 132, 132, 132, 132, 130, 131, 131, 130, 130, 131, 
131, 131, 132, 134, 132, 130, 128, 131, 133, 131, 131, 130, 129, 128, 128, 129, 127, 128, 124, 
120, 119, 118, 125, 127, 126, 124, 122, 122, 123, 123, 123, 124, 123, 122, 122, 122, 121, 120, 
119, 120, 118, 116, 115, 114, 114, 115, 114, 115, 113, 112, 113, 113, 112, 112, 111, 112, 112, 
113, 112, 112, 114, 113, 114, 114, 113, 114, 114, 114, 114, 114, 113, 113, 114, 114, 115, 116, 
116, 117, 118, 117, 117, 117, 117, 118, 118, 119, 119, 119, 118, 119, 118, 119, 119, 121, 121, 
124, 125, 124, 127, 125, 128, 132, 134, 136, 138, 135, 133, 129, 131, 135, 137, 137, 138, 137, 
138, 138, 138, 139, 167, 166, 164, 164, 162, 161, 162, 161, 159, 158, 156, 156, 155, 154, 154, 
153, 153, 151, 151, 149, 149, 147, 145, 144, 144, 143, 143, 141, 141, 141, 140, 138, 137, 136, 
135, 135, 134, 134, 133, 133, 133, 131, 129, 128, 130, 132, 131, 131, 133, 132, 133, 134, 134, 
134, 133, 132, 132, 130, 129, 128, 128, 127, 127, 129, 128, 127, 126, 123, 120, 119, 122, 127, 
128, 129, 126, 124, 125, 125, 125, 126, 126, 125, 124, 123, 121, 122, 121, 120, 118, 117, 116, 
115, 116, 115, 114, 114, 114, 113, 113, 113, 113, 112, 112, 112, 112, 112, 112, 113, 113, 114, 
113, 114, 114, 114, 114, 115, 114, 114, 114, 113, 114, 115, 115, 115, 115, 116, 117, 117, 118, 
117, 118, 118, 118, 119, 120, 119, 120, 119, 119, 119, 120, 121, 121, 122, 124, 125, 123, 126, 
126, 130, 133, 135, 136, 137, 136, 134, 133, 135, 138, 137, 137, 136, 137, 138, 137, 137, 137, 
164, 167, 166, 164, 163, 162, 161, 161, 161, 158, 156, 157, 156, 156, 155, 152, 151, 152, 152, 
151, 149, 147, 148, 146, 145, 144, 143, 141, 141, 141, 143, 140, 138, 136, 136, 135, 134, 134, 
134, 132, 131, 128, 123, 126, 129, 133, 133, 132, 133, 133, 133, 134, 134, 133, 134, 132, 132, 
130, 130, 128, 127, 127, 127, 126, 126, 124, 125, 126, 124, 123, 126, 130, 129, 130, 128, 127, 
127, 126, 127, 127, 125, 124, 124, 125, 123, 123, 122, 119, 117, 117, 116, 116, 116, 115, 115, 
114, 115, 114, 113, 114, 114, 113, 113, 111, 112, 112, 113, 114, 114, 114, 113, 114, 114, 114, 
114, 115, 115, 115, 114, 114, 114, 115, 115, 115, 116, 117, 117, 117, 117, 117, 117, 117, 118, 
120, 120, 119, 121, 119, 119, 120, 121, 121, 122, 123, 125, 124, 124, 121, 127, 131, 133, 137, 
138, 139, 137, 137, 138, 139, 139, 137, 136, 137, 136, 136, 136, 137, 136]


k31 = [ 241, 239, 239, 236, 233, 230, 228, 226, 224, 221, 219, 219, 216, 214, 212, 210, 207, 
205, 202, 200, 196, 195, 191, 189, 186, 185, 184, 180, 179, 177, 175, 174, 172, 171, 169, 
168, 166, 164, 163, 161, 160, 159, 158, 158, 156, 155, 154, 156, 157, 157, 157, 159, 159, 
162, 165, 169, 171, 170, 168, 168, 170, 171, 171, 169, 168, 165, 161, 160, 159, 155, 152, 
148, 151, 151, 149, 148, 148, 149, 149, 149, 149, 147, 147, 147, 146, 147, 148, 148, 147, 
148, 148, 150, 148, 149, 149, 148, 148, 148, 147, 147, 147, 146, 147, 148, 148, 149, 148, 
149, 146, 146, 148, 147, 147, 147, 147, 146, 148, 149, 146, 147, 147, 147, 147, 148, 149, 
149, 149, 149, 147, 148, 148, 149, 148, 147, 146, 146, 146, 146, 146, 147, 146, 146, 147, 
149, 151, 152, 153, 152, 154, 157, 158, 160, 161, 163, 169, 166, 166, 164, 164, 164, 163, 
161, 162, 162, 162, 162, 162, 241, 239, 238, 236, 232, 230, 228, 226, 224, 222, 221, 220, 
218, 215, 213, 209, 208, 206, 204, 202, 199, 195, 193, 190, 189, 187, 184, 182, 180, 178, 
177, 176, 173, 172, 171, 170, 169, 167, 165, 164, 162, 161, 161, 159, 158, 158, 157, 157, 
158, 159, 159, 159, 160, 163, 166, 166, 170, 170, 167, 165, 168, 168, 164, 164, 167, 165, 
164, 164, 160, 155, 154, 151, 149, 148, 148, 148, 146, 146, 147, 148, 150, 148, 148, 146, 
146, 147, 146, 148, 147, 147, 150, 148, 148, 147, 148, 148, 148, 149, 148, 147, 147, 149, 
148, 146, 146, 149, 148, 148, 148, 147, 148, 147, 147, 148, 147, 147, 147, 149, 147, 149, 
148, 148, 147, 148, 149, 149, 150, 148, 148, 149, 149, 149, 148, 146, 146, 145, 146, 146, 
146, 147, 146, 146, 148, 150, 151, 151, 153, 153, 152, 154, 158, 161, 162, 162, 166, 167, 
167, 166, 163, 162, 160, 160, 161, 161, 162, 161, 161, 241, 239, 237, 235, 233, 231, 229, 
226, 225, 224, 221, 222, 219, 217, 213, 212, 210, 207, 206, 203, 198, 196, 193, 192, 190, 
188, 185, 185, 181, 180, 179, 178, 176, 173, 173, 172, 171, 170, 167, 166, 164, 163, 163, 
162, 160, 160, 160, 160, 160, 159, 160, 162, 162, 163, 166, 165, 167, 166, 164, 163, 162, 
162, 161, 163, 164, 164, 161, 163, 164, 158, 154, 151, 148, 148, 149, 148, 145, 146, 148, 
149, 149, 149, 147, 147, 147, 149, 148, 148, 148, 149, 149, 148, 148, 147, 148, 148, 148, 
149, 148, 150, 148, 147, 147, 147, 146, 148, 147, 147, 148, 148, 149, 148, 150, 148, 148, 
148, 147, 149, 148, 148, 148, 149, 148, 150, 150, 150, 150, 149, 148, 149, 148, 148, 147, 
148, 147, 147, 146, 146, 147, 147, 148, 148, 148, 151, 150, 152, 152, 154, 150, 152, 158, 
161, 162, 162, 163, 165, 165, 164, 161, 159, 159, 160, 160, 159, 161, 161, 161, 240, 239, 
238, 235, 233, 231, 230, 227, 226, 224, 222, 222, 221, 218, 215, 212, 210, 208, 206, 202, 
199, 197, 194, 193, 191, 189, 188, 186, 183, 182, 181, 180, 178, 175, 175, 174, 173, 170, 
169, 168, 168, 166, 165, 163, 163, 164, 162, 162, 161, 161, 162, 161, 162, 162, 163, 163, 
161, 162, 160, 158, 158, 156, 157, 159, 159, 160, 158, 158, 159, 156, 153, 150, 148, 149, 
148, 149, 147, 149, 148, 150, 150, 149, 148, 148, 148, 149, 148, 149, 149, 148, 148, 146, 
147, 149, 149, 149, 148, 148, 148, 148, 147, 149, 147, 147, 148, 148, 148, 148, 149, 148, 
148, 148, 149, 148, 149, 148, 148, 150, 148, 147, 149, 150, 150, 149, 151, 150, 150, 150, 
149, 147, 148, 148, 149, 147, 147, 147, 146, 147, 147, 147, 147, 148, 149, 150, 151, 153, 
153, 154, 152, 156, 160, 161, 161, 161, 162, 165, 162, 160, 157, 157, 158, 159, 160, 159, 
160, 160, 161, 239, 239, 238, 235, 232, 231, 230, 228, 226, 225, 223, 222, 221, 218, 214, 
213, 211, 208, 206, 202, 200, 198, 197, 194, 193, 192, 189, 187, 185, 184, 184, 181, 180, 
178, 177, 176, 175, 174, 172, 171, 170, 168, 165, 164, 166, 164, 164, 163, 164, 164, 164, 
164, 163, 162, 162, 160, 161, 159, 157, 157, 156, 154, 156, 155, 156, 155, 155, 153, 154, 
154, 151, 152, 150, 150, 151, 148, 149, 149, 150, 150, 152, 152, 151, 150, 150, 149, 148, 
150, 148, 147, 147, 148, 147, 147, 147, 148, 148, 149, 147, 147, 149, 147, 147, 147, 147, 
148, 148, 147, 148, 148, 148, 150, 149, 148, 148, 149, 148, 150, 148, 150, 148, 149, 149, 
148, 150, 150, 150, 150, 149, 147, 147, 148, 148, 148, 148, 148, 147, 148, 147, 148, 148, 
148, 150, 151, 151, 152, 153, 153, 156, 159, 161, 162, 162, 162, 162, 163, 162, 161, 158, 
158, 158, 158, 158, 159, 160, 159, 159, 239, 238, 237, 234, 232, 231, 229, 228, 227, 226, 
225, 224, 222, 218, 218, 213, 210, 210, 204, 203, 201, 199, 198, 196, 194, 193, 192, 189, 
187, 186, 185, 184, 181, 179, 179, 178, 178, 175, 173, 172, 170, 168, 166, 166, 166, 166, 
166, 165, 167, 166, 166, 166, 165, 164, 162, 161, 160, 159, 157, 155, 155, 154, 154, 154, 
153, 152, 152, 151, 150, 149, 151, 152, 152, 153, 152, 152, 153, 151, 152, 153, 152, 152, 
153, 154, 151, 152, 150, 150, 149, 148, 148, 147, 147, 147, 147, 147, 149, 147, 147, 149, 
148, 147, 148, 146, 146, 146, 147, 148, 148, 147, 148, 148, 151, 149, 148, 149, 148, 150, 
148, 149, 149, 149, 150, 150, 150, 149, 150, 149, 148, 148, 148, 149, 149, 149, 148, 148, 
147, 147, 148, 148, 148, 149, 149, 150, 152, 152, 151, 151, 155, 161, 162, 163, 164, 168, 
165, 162, 162, 159, 158, 158, 157, 157, 158, 159, 159, 159, 159]


k41 = [ 333, 331, 330, 329, 328, 327, 325, 323, 321, 319, 317, 316, 313, 312, 311, 311, 310, 
307, 306, 304, 301, 300, 297, 296, 295, 292, 291, 289, 287, 284, 282, 281, 279, 277, 275, 
274, 272, 271, 268, 268, 265, 264, 263, 262, 260, 259, 259, 259, 258, 258, 257, 253, 254, 
256, 258, 258, 256, 257, 255, 256, 257, 257, 261, 264, 264, 259, 254, 253, 252, 252, 250, 
251, 254, 257, 256, 255, 256, 257, 257, 257, 257, 257, 259, 259, 260, 260, 260, 260, 260, 
261, 261, 261, 261, 261, 261, 261, 259, 260, 260, 258, 259, 257, 258, 257, 257, 257, 258, 
258, 257, 256, 256, 256, 255, 255, 254, 253, 253, 251, 251, 250, 250, 249, 248, 247, 247, 
247, 246, 246, 244, 244, 243, 242, 241, 241, 240, 239, 239, 236, 234, 235, 233, 232, 231, 
230, 229, 231, 230, 228, 229, 231, 232, 233, 233, 232, 236, 237, 236, 235, 233, 233, 232, 
229, 228, 228, 227, 227, 227, 334, 333, 331, 330, 329, 329, 327, 325, 322, 320, 318, 317, 
316, 314, 313, 313, 312, 310, 308, 306, 304, 302, 300, 298, 296, 295, 293, 291, 289, 286, 
284, 283, 282, 280, 278, 277, 275, 273, 271, 270, 267, 266, 265, 264, 263, 261, 260, 261, 
261, 261, 260, 258, 259, 260, 261, 260, 257, 257, 259, 258, 257, 255, 259, 261, 261, 258, 
257, 254, 254, 249, 250, 251, 254, 253, 254, 253, 256, 256, 256, 257, 256, 257, 258, 259, 
260, 259, 259, 259, 260, 260, 261, 261, 261, 260, 260, 259, 259, 260, 259, 259, 257, 257, 
257, 257, 257, 257, 258, 257, 257, 256, 256, 255, 256, 256, 255, 254, 253, 252, 251, 250, 
250, 249, 248, 247, 247, 246, 246, 247, 245, 244, 243, 242, 241, 240, 239, 239, 238, 237, 
235, 234, 234, 233, 232, 230, 229, 230, 229, 226, 227, 228, 231, 232, 232, 232, 235, 239, 
236, 234, 232, 233, 230, 231, 228, 228, 228, 228, 227, 335, 333, 332, 332, 330, 330, 328, 
326, 324, 321, 320, 318, 318, 316, 315, 315, 313, 312, 310, 307, 305, 303, 302, 300, 299, 
296, 295, 292, 291, 288, 287, 286, 284, 282, 281, 278, 278, 276, 274, 273, 271, 269, 267, 
267, 266, 265, 263, 264, 263, 262, 263, 262, 263, 262, 262, 259, 258, 255, 256, 257, 255, 
254, 255, 257, 255, 249, 252, 254, 254, 249, 249, 252, 254, 253, 253, 254, 254, 256, 255, 
255, 256, 257, 257, 259, 259, 260, 259, 258, 259, 259, 260, 260, 260, 260, 259, 259, 259, 
260, 259, 258, 256, 256, 255, 256, 256, 257, 257, 257, 257, 256, 255, 255, 256, 256, 255, 
253, 252, 251, 251, 250, 250, 249, 248, 248, 247, 246, 246, 247, 245, 244, 243, 242, 241, 
241, 240, 240, 239, 238, 236, 236, 234, 234, 232, 231, 229, 231, 228, 226, 225, 225, 229, 
231, 232, 232, 234, 235, 234, 230, 231, 231, 230, 230, 230, 229, 229, 228, 227, 335, 333, 
334, 332, 331, 330, 328, 326, 324, 322, 321, 319, 319, 317, 316, 316, 315, 313, 312, 310, 
307, 306, 304, 302, 300, 299, 297, 294, 292, 291, 289, 287, 286, 284, 282, 281, 281, 278, 
277, 276, 275, 272, 270, 270, 269, 269, 267, 266, 266, 265, 267, 267, 265, 264, 263, 259, 
258, 256, 255, 255, 254, 254, 252, 252, 251, 249, 253, 253, 251, 247, 248, 252, 252, 251, 
253, 253, 254, 254, 254, 255, 255, 256, 257, 258, 259, 259, 258, 258, 259, 260, 259, 259, 
259, 259, 258, 259, 259, 259, 258, 257, 256, 255, 255, 255, 256, 257, 256, 256, 256, 255, 
254, 254, 255, 255, 254, 252, 251, 251, 250, 249, 249, 248, 248, 248, 247, 246, 246, 246, 
246, 245, 244, 242, 242, 241, 241, 240, 240, 238, 237, 236, 235, 234, 233, 232, 230, 230, 
231, 227, 225, 229, 230, 231, 233, 233, 233, 234, 232, 232, 231, 230, 230, 229, 229, 230, 
229, 229, 228, 334, 334, 333, 332, 331, 330, 329, 327, 324, 323, 322, 320, 319, 318, 318, 
316, 316, 314, 312, 310, 309, 308, 306, 304, 301, 300, 298, 296, 294, 292, 290, 290, 287, 
285, 285, 283, 282, 281, 279, 279, 277, 274, 272, 273, 272, 271, 271, 269, 269, 268, 269, 
269, 267, 265, 263, 260, 258, 258, 256, 255, 253, 253, 253, 252, 251, 251, 254, 253, 251, 
249, 248, 250, 252, 250, 250, 251, 252, 251, 254, 254, 254, 256, 257, 257, 258, 259, 258, 
259, 259, 258, 258, 258, 258, 258, 258, 258, 259, 258, 257, 256, 256, 255, 255, 255, 256, 
256, 256, 255, 255, 255, 254, 255, 255, 254, 253, 251, 250, 250, 249, 249, 248, 248, 247, 
248, 246, 246, 246, 245, 245, 245, 244, 242, 242, 242, 241, 240, 239, 238, 237, 236, 234, 
234, 233, 232, 231, 230, 233, 229, 228, 228, 229, 231, 232, 231, 231, 232, 230, 232, 231, 
230, 229, 229, 229, 229, 229, 229, 229, 334, 333, 333, 333, 331, 330, 329, 327, 325, 323, 
321, 321, 321, 319, 319, 318, 317, 315, 314, 313, 311, 309, 308, 305, 303, 301, 300, 297, 
295, 294, 293, 291, 288, 286, 286, 285, 284, 283, 281, 281, 279, 275, 272, 275, 273, 275, 
274, 272, 272, 271, 272, 271, 269, 267, 264, 262, 260, 259, 257, 257, 255, 255, 253, 253, 
252, 252, 252, 252, 252, 251, 252, 251, 251, 249, 249, 250, 251, 250, 252, 251, 255, 256, 
257, 256, 258, 259, 260, 260, 260, 259, 258, 257, 257, 257, 257, 257, 258, 257, 256, 256, 
255, 255, 255, 255, 255, 255, 255, 254, 255, 254, 254, 254, 254, 253, 253, 251, 250, 249, 
249, 249, 248, 248, 248, 247, 246, 245, 245, 245, 244, 244, 243, 243, 242, 243, 241, 240, 
239, 238, 237, 236, 235, 235, 234, 232, 230, 229, 230, 226, 229, 230, 232, 232, 231, 229, 
229, 231, 232, 232, 231, 231, 229, 228, 228, 229, 229, 229, 229]
ki2 = []
ki3 = []
for i2 in range(0,n2,10):
  for i3 in range(0,n3,10):
    ki3.append(i3)
for i3 in range(0,n3,10):
  for i2 in range(0,n2,10):
    ki2.append(i2)
k51 = [k21[200]]#,k21[800]]
k52 = [ki2[200]]#,ki2[800]]
k53 = [ki3[200]]#,ki3[800]]
# Processing begins here. When experimenting with one part of this demo, we
# can comment out earlier parts that have already written results to files.
def main(args):
  #goSlopes()
  goFlattenC()

def goSlopes():
  print "goSlopes ..."
  if not plotOnly:
    # set half-width of smoother for computing structure tensors
    sig1 = 4.0 #half-width in vertical direction
    sig2 = 1.0 #half-width in one literal direction
    sig3 = 1.0 #half-width in another literal direction
    pmax = 5.0 #maximum slope returned by this slope finder
    gx = readImage(gxfile)
    p2 = zerofloat(n1,n2,n3)
    p3 = zerofloat(n1,n2,n3)
    ep = zerofloat(n1,n2,n3)
    lsf = LocalSlopeFinder(sig1,sig2,sig3,pmax)
    lsf.findSlopes(gx,p2,p3,ep);
    ep = pow(ep,6.0)
    #control points for extracting the water bottom surface
    c1=[ 31, 68,56]
    c2=[226,275,35]
    c3=[263, 53,35]
    zm = ZeroMask(c1,c2,c3,p2,p3,ep,gx)
    zero = 0.00;
    tiny = 0.01;
    zm.setValue(zero,p2)#set inline slopes for samples above water bottom
    zm.setValue(zero,p3)#set crossline slopes for samples above water bottom
    zm.setValue(tiny,ep)#set planarities for samples above water bottom
    writeImage(p2file,p2)
    writeImage(p3file,p3)
    writeImage(epfile,ep)
    print "p2  min =",min(p2)," max =",max(p2)
    print "p3  min =",min(p3)," max =",max(p3)
    print "ep  min =",min(ep)," max =",max(ep)
  else:
    gx = readImage(gxfile)
    p2 = readImage(p2file)
    p3 = readImage(p3file)
    ep = readImage(epfile)
  plot3(gx)
  plot3(gx,p2, cmin=-1,cmax=1,cmap=jetRamp(1.0),
      clab="Inline slope (sample/sample)",png="p2")
  plot3(gx,p3, cmin=-1,cmax=1,cmap=jetRamp(1.0),
      clab="Crossline slope (sample/sample)",png="p3")
  plot3(gx,pow(ep,4.0),cmin=0,cmax=1,cmap=jetRamp(1.0),
      clab="Planarity")

def goFlattenC():
  print "Flatten with control points..."
  if not plotOnly:
    gx = readImage(gxfile)
    p2 = readImage(p2file)
    p3 = readImage(p3file)
    ep = readImage(epfile)

    sc = SetupConstraints()
    kk1 = sc.extend(k11,ki2,ki3,n2,n3,p2,p3,ep,gx)
    kk2 = sc.extend(k21,ki2,ki3,n2,n3,p2,p3,ep,gx)
    kk3 = sc.extend(k31,ki2,ki3,n2,n3,p2,p3,ep,gx)
    kk4 = sc.extend(k41,ki2,ki3,n2,n3,p2,p3,ep,gx)
    k1 = [kk1[0],kk2[0],kk3[0],kk4[0]]
    k2 = [kk1[1],kk2[1],kk3[1],kk4[1]]
    k3 = [kk1[2],kk2[2],kk3[2],kk4[2]]
    k4 = [kk1[3],kk2[3],kk3[3],kk4[3]]

    p2 = mul(d1/d2,p2)
    p3 = mul(d1/d3,p3)
    fl = Flattener3C()
    fl.setIterations(0.01,200)
    fl.setSmoothings(6.0,6.0)
    fl.setWeight1(0.05)  
    fl.setScale(0.001)
    fm = fl.getMappingsFromSlopes(s1,s2,s3,p2,p3,ep,k4,k1,k2,k3)
    gu = fm.flatten(gx) # flattened image
    gt = fm.u1 # rgt volume
    gh = fm.x1 # horizon volume
    writeImage(gufile,gu)
    writeImage(gtfile,gt)
    writeImage(ghfile,gh)
  else:
    gx = readImage(gxfile)
    gu = readImageX(gufile)
    gt = readImageX(gtfile)
    gh = readImageX(ghfile)
  plot3(gx,png="seismic")
  plot3(gu,png="flattened")
  plot3(gx,gt,cmin=min(gt)+20,cmax=max(gt)-10,cmap=jetRamp(1.0),
        clab="Relative geologic time",png="rgt")
  '''
  ha = []
  hs = [280,275,270,265,260,255,250,245,240,235,230,225,220,215,
        210,205,200,195,190,185,180,175,170,165,160,155,150,145,
        140,135,130,125,120,115,110,105,100,95,90,85,80,75,70,65,60,55,50,45,40]
  for ih, h in enumerate(hs):
    ha.append(h)
    plot3(gx,hs=ha,png="horizon"+str(ih))
  '''
  for i1 in range(100,300,10):
    plot3(gx,hs=[i1],png="horizon"+str(i1))
#############################################################################
# read/write files
bo = ByteOrder.nativeOrder()
def readImage(name):
  fileName = seismicDir+name+".dat"
  n1,n2,n3 = s1.count,s2.count,s3.count
  image = zerofloat(n1,n2,n3)
  ais = ArrayInputStream(fileName,bo)
  ais.readFloats(image)
  ais.close()
  return image

def readImageX(name):
  fileName = seismicDir+name+".dat"
  n1,n2,n3 = s1.count,s2.count,s3.count
  image = zerofloat(n1,n2,n3)
  ais = ArrayInputStream(fileName)
  ais.readFloats(image)
  ais.close()
  return image

def writeImage(name,image):
  fileName = seismicDir+name+".dat"
  aos = ArrayOutputStream(fileName)
  aos.writeFloats(image)
  aos.close()
  return image

# graphics

def jetFill(alpha):
  return ColorMap.setAlpha(ColorMap.JET,alpha)
def jetFillExceptMin(alpha):
  a = fillfloat(alpha,256)
  a[0] = 0.0
  return ColorMap.setAlpha(ColorMap.JET,a)
def jetRamp(alpha):
  return ColorMap.setAlpha(ColorMap.JET,rampfloat(0.0,alpha/256,256))
def bwrFill(alpha):
  return ColorMap.setAlpha(ColorMap.BLUE_WHITE_RED,alpha)
def bwrNotch(alpha):
  a = zerofloat(256)
  for i in range(len(a)):
    if i<128:
      a[i] = alpha*(128.0-i)/128.0
    else:
      a[i] = alpha*(i-127.0)/128.0
  return ColorMap.setAlpha(ColorMap.BLUE_WHITE_RED,a)
def hueFill(alpha):
  return ColorMap.getHue(0.0,1.0,alpha)
def hueFillExceptMin(alpha):
  a = fillfloat(alpha,256)
  a[0] = 0.0
  return ColorMap.setAlpha(ColorMap.getHue(0.0,1.0),a)

def addColorBar(frame,clab=None,cint=None):
  cbar = ColorBar(clab)
  if cint:
    cbar.setInterval(cint)
  cbar.setFont(Font("Arial",Font.PLAIN,32)) # size by experimenting
  cbar.setWidthMinimum
  cbar.setBackground(Color.WHITE)
  frame.add(cbar,BorderLayout.EAST)
  return cbar

def convertDips(ft):
  return FaultScanner.convertDips(0.2,ft) # 5:1 vertical exaggeration

def plot3(f,g=None,cmin=None,cmax=None,cmap=None,clab=None,cint=None,
          hs=None,surf=None, png=None):
  n1,n2,n3 = s1.count,s2.count,s3.count
  d1,d2,d3 = s1.delta,s2.delta,s3.delta
  f1,f2,f3 = s1.first,s2.first,s3.first
  l1,l2,l3 = s1.last,s2.last,s3.last
  sf = SimpleFrame(AxesOrientation.XRIGHT_YOUT_ZDOWN)
  cbar = None
  if g==None:
    ipg = sf.addImagePanels(s1,s2,s3,f)
    if cmap!=None:
      ipg.setColorModel(cmap)
    if cmin!=None and cmax!=None:
      ipg.setClips(cmin,cmax)
    else:
      ipg.setClips(-3.0,3.0)
    if clab:
      cbar = addColorBar(sf,clab,cint)
      ipg.addColorMapListener(cbar)
  else:
    ipg = ImagePanelGroup2(s1,s2,s3,f,g)
    ipg.setClips1(-3.0,3.0)
    if cmin!=None and cmax!=None:
      ipg.setClips2(cmin,cmax)
    if cmap==None:
      cmap = jetFill(0.8)
    ipg.setColorModel2(cmap)
    if clab:
      cbar = addColorBar(sf,clab,cint)
      ipg.addColorMap2Listener(cbar)
    sf.world.addChild(ipg)
  if cbar:
    cbar.setWidthMinimum(120)
  if hs:
    x1 = readImageX(ghfile)
    u1 = readImageX(gtfile)
    hfr = HorizonFromRgt(s1,s2,s3,x1,u1)
    for hi in hs:
      [xyz,rgb] = hfr.singleHorizon(hi)
      tg = TriangleGroup(True,xyz,rgb)
      sf.world.addChild(tg)
  if surf:
    tgs = Triangle()
    xyz = tgs.trianglesForSurface(surf,0,n1-1)
    tg  = TriangleGroup(True,xyz)
    sf.world.addChild(tg)
  #ipg.setSlices(290,300,268)
  ipg.setSlices(290,300,271)
  if cbar:
    sf.setSize(937,700)
  else:
    sf.setSize(800,700)
  vc = sf.getViewCanvas()
  vc.setBackground(Color.WHITE)
  ov = sf.getOrbitView()
  zscale = 0.6*max(n2*d2,n3*d3)/(n1*d1)
  ov.setAxesScale(1.0,1.0,zscale)
  ov.setScale(1.5)
  ov.setAzimuthAndElevation(220,25)
  ov.setWorldSphere(BoundingSphere(BoundingBox(f3,f2,f1,l3,l2,l1)))
  ov.setTranslate(Vector3(0.0,0.1,0.05))
  sf.setVisible(True)
  if png and pngDir:
    sf.paintToFile(pngDir+png+".png")
    if cbar:
      cbar.paintToPng(137,1,pngDir+png+"cbar.png")

#############################################################################
# Run the function main on the Swing thread
import sys
class _RunMain(Runnable):
  def __init__(self,main):
    self.main = main
  def run(self):
    self.main(sys.argv)
def run(main):
  SwingUtilities.invokeLater(_RunMain(main)) 
run(main)
